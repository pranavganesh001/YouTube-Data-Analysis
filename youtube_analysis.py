# -*- coding: utf-8 -*-
"""DAV_Project_Youtube_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f8e1oWlujzSx9EAhvWOhfMAgalrrsjje

#Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

import warnings
warnings.filterwarnings('ignore')

from wordcloud import WordCloud, STOPWORDS
np.set_printoptions(suppress=True)

"""#Reading the Data"""

data = pd.read_csv('/content/Global YouTube Statistics.csv', encoding = 'latin-1')

data.reset_index(drop= True, inplace= True)
data

"""#Viewing the Data"""

data.head()

data.tail()

data.info()

data.shape

data.columns

#Modifying the names of the columns in dataset
data.columns = data.columns.str.replace('_',' ')
data.columns = data.columns.str.title()
data.columns

"""#Data Pre Processing"""

#Selecting the variables required for analysis
youtube = data[['Youtuber', 'Subscribers', 'Video Views', 'Uploads', 'Category', 'Country', 'Abbreviation', 'Lowest Monthly Earnings', 'Highest Monthly Earnings', 'Gross Tertiary Education Enrollment (%)', 'Unemployment Rate', 'Population', 'Urban Population', 'Created Year']]

youtube

youtube.head(10)

#remove special characters
pattern = r'[^a-zA-Z0-9\s.,!?&\'-]'

#Youtuber feature
youtube['Youtuber'] = youtube['Youtuber'].apply(lambda x: re.sub(pattern, '', x))
youtube['Youtuber'] = youtube['Youtuber'].str.strip()
youtube['Youtuber'] = youtube['Youtuber'].str.lstrip('- ')

filter_youtuber_rows = youtube['Youtuber'].str.contains(pattern, regex = True)
filter_youtuber_rows_results = filter_youtuber_rows[filter_youtuber_rows == True]
print("Youtuber's special characters:",filter_youtuber_rows_results)

youtube.head()

youtube.info()

youtube.columns

#Remove data null in column 'Created Year'
youtube = youtube.dropna(subset= ['Created Year'])
youtube['Created Year'] = youtube['Created Year'].astype('object')
youtube.info()

#Check Created Year data
youtube['Created Year'].unique()

#Check Created Year is 1970
youtube[youtube['Created Year'] == 1970]

youtube[youtube['Youtuber'] == 'YouTube'] = youtube[youtube['Youtuber'] == 'YouTube'].replace(1970, 2005)
youtube[youtube['Youtuber'] == 'YouTube']

youtube['Created Year'].unique()

#After remomved characters, we will some blanks data in column 'Youtuber'. Let's check it
blanks_data_youtuber = youtube[youtube['Youtuber'] == '']
blanks_data_youtuber

# Remove rows from with blank Youtuber as these are channels with only special characters
youtube = youtube.drop(blanks_data_youtuber.index)
youtube.reset_index(drop= True, inplace= True)
youtube[youtube['Youtuber'] == '']

#Check duplicate data
youtube.duplicated().sum()

#Check zero data video views
zero_views = youtube[youtube['Video Views'] == 0]
zero_views

#Remove zero data video views
youtube = youtube.drop(zero_views.index)
youtube.reset_index(drop= True, inplace= True)
youtube[youtube['Video Views'] == 0]

youtube.shape

#Check null/nan data
youtube.isnull().sum()

#There are lots of missing value in the category variables
#We will filter all missing to 'Other'

#Select category columns
categorical_variables = youtube.select_dtypes(include= 'O').columns

#Replace object datatype column missing values with 'Other'
youtube[categorical_variables] = youtube[categorical_variables].fillna('Other')

#check missing value
youtube.isna().sum()

youtube.info()

#Youtube is not null
youtube_not_null = youtube.dropna(subset= ['Gross Tertiary Education Enrollment (%)','Unemployment Rate', 'Population', 'Urban Population'])

#Mean Education Enrollment
mean_edu = round(youtube_not_null['Gross Tertiary Education Enrollment (%)'].mean(),1)
print('Mean Gross Tertiary Education Enrollment:', mean_edu)

#Mean Unemployment Rate
mean_unemp = round(youtube_not_null['Unemployment Rate'].mean(),1)
print('Mean Unemployment Rate:', mean_unemp)

#Mean Population
mean_popu = round(youtube_not_null['Population'].mean(),0)
print('Mean Population:', mean_popu)

#Mean Urban Population
mean_urban = round(youtube_not_null['Urban Population'].mean(),0)
print('Mean Urban Population:', mean_urban)

#There are lots of missing value in the numeric variables
#Replace object datatype column missing values with Mean Values
youtube['Gross Tertiary Education Enrollment (%)'] = youtube['Gross Tertiary Education Enrollment (%)'].fillna(mean_edu)
youtube['Unemployment Rate'] = youtube['Unemployment Rate'].fillna(mean_unemp)
youtube['Population'] = youtube['Population'].fillna(mean_popu)
youtube['Urban Population'] = youtube['Urban Population'].fillna(mean_urban)

youtube.info()

# Convert several float data typescolumns to integers
youtube = youtube.astype({
    'Video Views': 'int64',
    'Created Year': 'int64',
    'Population': 'int64',
    'Urban Population': 'int64'
})

# Validate results of datatype change
youtube.info()

#sorting the dataframe and resetting index (by 'Subscribers)
youtube = youtube.sort_values(by = 'Subscribers', ascending= False).reset_index(drop= True)
youtube

youtube.to_csv('Global_Youtube_Statistics_2023_new.csv', index = False)



youtube.shape

"""#EDA- Exploratory Data Analysis"""

youtube_color_barchart_10 = ['#f00000','#ff2424','#ff3838','#ff554f','#fb7571','#cccccc','#b6b6b6','#9e9e9e','#888888','#777777']

youtube_color_donutchart = ['#777777','#9e9e9e','#b6b6b6','#cccccc', '#fb7571', '#ff3838','#f00000']

youtube_color_barchart_freestyle1 = ['#f00000', '#f00000', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777','#777777']

youtube_color_barchart_freestyle2 = ['#FE0000','#F4E0B9','#A8A196','#7D7463']

youtube_color_barchart_freestyle3 = ['#f00000', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777', '#777777']

"""1.Who are the Top 10 YouTubers in terms of subscribers and the Top 10 YouTubers with the highest views?"""

#Statistics by Subscribers

#Select columns to show output
select_columns = ['Youtuber', 'Subscribers']

#Filter dataframe for top 10 most subscribers Youtuber channels
top_10_subs = youtube[select_columns].head(10)

#Convert 'Subscriber' in millions
top_10_subs['Subscribers (million)'] = (top_10_subs['Subscribers'] / 1000000).astype('int')
top_10_subs = top_10_subs[['Youtuber', 'Subscribers (million)']]

#Show dataframe
print(top_10_subs)

print('*'*100)

#Statistics by Video Views

#Select columns to show output
select_columns = ['Youtuber', 'Video Views']

#Filter dataframe for top 10 most video views Youtuber channels
youtube_videoviews = youtube[select_columns]
top_10_views = youtube_videoviews.sort_values(by = 'Video Views', ascending= False).head(10)

#Convert 'Video Views' in billions
top_10_views['Video Views (billion)'] = (top_10_views['Video Views'] / 1000000000).astype('int')
top_10_views = top_10_views[['Youtuber', 'Video Views (billion)']].sort_values(by= 'Video Views (billion)', ascending= False).reset_index(drop=True)

#Show dataframe
print(top_10_views)

youtube_color_barchart_10 = ['#f00000','#ff2424','#ff3838','#ff554f','#fb7571','#cccccc','#b6b6b6','#9e9e9e','#888888','#777777']

sb.set_style("whitegrid",{'axes.grid' : True})

fig, ax = plt.subplots(1, 2, figsize = (30,8))

sb.barplot(top_10_subs,x = 'Subscribers (million)' ,y = 'Youtuber', palette= youtube_color_barchart_10, ax = ax[0])
ax[0].set_title('Top 10 Youtuber Channels by Subscribers (2023)',fontweight = 'heavy', fontsize = 16)
ax[0].set_xlabel('Subscribers (million)',fontweight = 'heavy', fontsize = 12)
ax[0].set_ylabel('Youtuber Channel',fontweight = 'heavy', fontsize = 12)
ax[0].grid(axis = 'x', linestyle ='--')
ax[0].spines['top'].set_visible(False)
ax[0].spines['right'].set_visible(False)
ax[0].spines['bottom'].set_visible(False)
ax[0].spines['left'].set_visible(False)
plt.sca(ax[0])
plt.yticks(size = 9)

sb.barplot(top_10_views,x = 'Video Views (billion)' ,y = 'Youtuber', palette= youtube_color_barchart_10, ax = ax[1])
ax[1].set_title('Top 10 Youtuber Channels by Video Views (2023)',fontweight = 'heavy', fontsize = 16)
ax[1].set_xlabel('Video Views (billion)',fontweight = 'heavy', fontsize = 12)
ax[1].set_ylabel('Youtuber Channel',fontweight = 'heavy', fontsize = 12)
ax[1].grid(axis = 'x', linestyle ='--')
ax[1].spines['top'].set_visible(False)
ax[1].spines['right'].set_visible(False)
ax[1].spines['bottom'].set_visible(False)
ax[1].spines['left'].set_visible(False)
plt.sca(ax[1])
plt.yticks(size = 9)

plt.show();

"""2. Does a higher number of subscribers on a YouTube channel imply higher views?"""

#This can be found out by finding the correlation between the varibales
correlation = youtube[['Subscribers', 'Video Views', 'Uploads', 'Lowest Monthly Earnings', 'Highest Monthly Earnings', 'Gross Tertiary Education Enrollment (%)', 'Unemployment Rate', 'Population', 'Urban Population', 'Created Year']].corr()

#Visualising the relation between Subscribers and Views
plt.figure(figsize= (10,8))
plt.title('Correlation Matrix Heatmap', fontweight = 'heavy', fontsize = 16)
sb.heatmap(correlation, annot= True,
           cmap= 'coolwarm',
           vmin= -1, vmax= 1,
           linecolor = 'white', linewidths = 0.5,
           fmt = '.2f'
           )
plt.show()

correlation = youtube[['Subscribers', 'Video Views']].corr()
correlation

#Visualising the relation between Subscribers and Views
plt.figure(figsize= (10,8))
plt.title('Correlation Matrix Heatmap', fontweight = 'heavy', fontsize = 16)
sb.heatmap(correlation, annot= True,
           cmap= 'Reds',
           vmin= -1, vmax= 1,
           linecolor = 'white', linewidths = 0.5,
           fmt = '.2f'
           )
plt.show()

#Statistics Subscriber (million), Video Views (billion) & Uploads (k.)

#Select columns to show output
select_columns = ['Youtuber', 'Subscribers', 'Video Views', 'Uploads']

#Filter dataframe by select_columns
youtube_corr_statistics = youtube[select_columns]

#Convert 'Subscriber' in millions
youtube_corr_statistics['Subscribers (million)'] = (youtube_corr_statistics['Subscribers'] / 1000000).astype('int')

#Convert 'Video Views' in b illions
youtube_corr_statistics['Video Views (billion)'] = (youtube_corr_statistics['Video Views'] / 1000000000).astype('int')

#Convert 'Uploads' in thousand
youtube_corr_statistics['Uploads (k.)'] = (youtube_corr_statistics['Uploads'] / 1000)

youtube_corr_statistics = youtube_corr_statistics[['Youtuber', 'Subscribers (million)', 'Video Views (billion)', 'Uploads (k.)' ]]

#Show dataframe
youtube_corr_statistics.head()

youtube_corr_statistics['Video Views (billion)'].mean()

youtube_corr_statistics['Subscribers (million)'].mean()

per_subs = round(np.percentile(youtube_corr_statistics['Subscribers (million)'], 95))
per_views = round(np.percentile(youtube_corr_statistics['Video Views (billion)'], 95))

print('95% of YouTube channels have subscribers below:', per_subs, 'million')
print('95% of YouTube channels have video views below:', per_views, 'billion')

sb.set_style("whitegrid",{'axes.grid' : False})
fig, (ax1, ax2) = plt.subplots(1,2, figsize = (20,6))
sb.histplot(youtube_corr_statistics['Subscribers (million)'], color= 'red',ax = ax1)
ax1.set_title('Distribution of Subscribers', fontweight = 'heavy', fontsize = 16)
ax1.set_xlabel('Subscribers (million)', fontweight = 'heavy', fontsize = 12)
ax1.set_ylabel('Count', fontweight = 'heavy', fontsize = 12)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)
ax1.spines['bottom'].set_visible(True)
ax1.spines['left'].set_visible(True)

sb.histplot(youtube_corr_statistics['Video Views (billion)'], color= 'red', ax = ax2)
ax2.set_title('Distribution of Video Views', fontweight = 'heavy', fontsize = 16)
ax2.set_xlabel('Video Views (billion)', fontweight = 'heavy', fontsize = 12)
ax2.set_ylabel('Count', fontweight = 'heavy', fontsize = 12)
ax2.spines['top'].set_visible(False)
ax2.spines['right'].set_visible(False)
ax2.spines['bottom'].set_visible(True)
ax2.spines['left'].set_visible(True)

# Calculate the correlation coefficient
correlation = youtube_corr_statistics['Subscribers (million)'].corr(youtube_corr_statistics['Video Views (billion)'])

# Set scaling factor of circle size
scaling_factor = 2

# Calculate the size of circles
sizes = youtube_corr_statistics['Video Views (billion)'] * scaling_factor

# Chart
plt.figure(figsize= (10,6))
plt.title('Correlation between Subscribers and Video Views (2023)', fontweight = 'heavy', fontsize = 16 )
sb.scatterplot(data= youtube_corr_statistics, x='Video Views (billion)', y='Subscribers (million)', color = 'red',alpha=0.6, s = sizes)
sb.regplot(data= youtube_corr_statistics,  x='Video Views (billion)', y='Subscribers (million)',scatter=False, ci=None,line_kws={"color": "red"})
plt.xlabel('Video Views (billion)', fontweight = 'heavy', fontsize = 12)
plt.ylabel('Subscribers (million)', fontweight = 'heavy', fontsize = 12)
# plt.grid(True, which = 'both', linestyle = '--', linewidth = 0.5)

sb.despine(left=False, bottom=False)
plt.grid(axis = 'y', linestyle ='')
# Note correlation
plt.annotate(f'Correlation: {correlation:.2f}',
             xy = (0.85, 0.01),
             xycoords = 'axes fraction',
             fontsize = 10,
             weight = 'bold')
plt.show()

"""**3. Does uploading more videos on a YouTube channel lead to an increase in subscribers and views?**"""

top_upload_channels = youtube[['Youtuber', 'Category', 'Uploads']].sort_values(by= 'Uploads', ascending= False).reset_index(drop= True).head(10)
top_upload_channels

fig, ax = plt.subplots(1, 2, figsize = (20,8))

#Upload & Subscribers
# Calculate the correlation coefficient
correlation_ax0 = youtube_corr_statistics['Uploads (k.)'].corr(youtube_corr_statistics['Subscribers (million)'])
# Set scaling factor of circle size
scaling_factor_ax0 = 2
# Calculate the size of circles
sizes_ax0 = youtube_corr_statistics['Subscribers (million)'] * scaling_factor_ax0
# Chart
plt.figure(figsize= (10,6))
ax[0].set_title('Correlation between Uploads and Subscribers (2023)', fontweight = 'heavy', fontsize = 16 )
sb.scatterplot(data= youtube_corr_statistics, x='Subscribers (million)', y='Uploads (k.)', color = 'gray',alpha=0.6, s = sizes_ax0, ax= ax[0])
sb.regplot(data= youtube_corr_statistics,  x='Subscribers (million)', y='Uploads (k.)', scatter=False, ci=None,line_kws={"color": "red"}, ax= ax[0])
ax[0].set_xlabel('Subscribers (million)', fontweight = 'heavy', fontsize = 12)
ax[0].set_ylabel('Video Uploads (k.)', fontweight = 'heavy', fontsize = 12)
ax[0].spines['top'].set_visible(False)
ax[0].spines['right'].set_visible(False)
ax[0].annotate(f'Correlation: {correlation_ax0:.2f}',
             xy = (0.87, 0.01),
             xycoords = 'axes fraction',
             fontsize = 10,
             weight = 'bold')

#Uploads & Video Views
# Calculate the correlation coefficient
correlation_ax1 = youtube_corr_statistics['Uploads (k.)'].corr(youtube_corr_statistics['Video Views (billion)'])
# Set scaling factor of circle size
scaling_factor_ax1 = 2
# Calculate the size of circles
sizes_ax1 = youtube_corr_statistics['Video Views (billion)'] * scaling_factor
# Chart
plt.figure(figsize= (10,6))
ax[1].set_title('Correlation between Uploads and Video Views (2023)', fontweight = 'heavy', fontsize = 16 )
sb.scatterplot(data= youtube_corr_statistics, x='Video Views (billion)', y='Uploads (k.)', color = 'gray',alpha=0.6, s = sizes_ax1, ax= ax[1])
sb.regplot(data= youtube_corr_statistics,  x='Video Views (billion)', y='Uploads (k.)', scatter=False, ci=None,line_kws={"color": "red"}, ax= ax[1])
ax[1].set_xlabel('Video Views (billion)', fontweight = 'heavy', fontsize = 12)
ax[1].set_ylabel('Video Uploads (k.)', fontweight = 'heavy', fontsize = 12)
ax[1].annotate(f'Correlation: {correlation_ax1:.2f}',
             xy = (0.87, 0.01),
             xycoords = 'axes fraction',
             fontsize = 10,
             weight = 'bold')
ax[1].spines['top'].set_visible(False)
ax[1].spines['right'].set_visible(False)
plt.show()

"""**4. Which types of YouTube channels have the highest number of uploaded videos?**"""

#Statistics by Category

#Group by lots of feature by Category
statis_category = youtube.groupby('Category').agg({'Category' : 'count','Uploads' : 'sum','Subscribers' : 'sum','Video Views' : 'sum'})

#Rename count feature
statis_category = statis_category.rename(columns= {'Category' : 'Count of Category'}).reset_index()

#Unit conversion
statis_category['Video Views (billion)'] = (statis_category['Video Views']/1000000000).astype('int')
statis_category['Subscribers (million)'] = (statis_category['Subscribers']/1000000).astype('int')
statis_category['Uploads (k.)'] = (statis_category['Uploads']/1000).astype('int')

#Select feature
statis_category = statis_category[['Category', 'Count of Category', 'Uploads (k.)','Subscribers (million)', 'Video Views (billion)']] #

#Show statistics table
statis_category

#Select feature to to summary about Uploads
uploads_category = statis_category[['Category', 'Uploads (k.)']]

#Group features with counts under 300 into the general category other
uploads_category.loc[uploads_category['Uploads (k.)'] < 300, 'Category'] = 'Other'
uploads_category = uploads_category.groupby(['Category'])['Uploads (k.)'].sum().reset_index().sort_values(by = 'Uploads (k.)', ascending= False)

total = sum(uploads_category['Uploads (k.)'])
uploads_category['Percent Uploads (%)'] = [round((value / total) * 100,0) for value in uploads_category['Uploads (k.)']]
uploads_category.reset_index(drop= True, inplace= True)

#Show statistics table
uploads_category

uploads_category = uploads_category.sort_values(by = 'Percent Uploads (%)',  ascending= True)
uploads_category

labels = uploads_category['Category']
sizes = uploads_category['Uploads (k.)']

explode = [0, 0, 0, 0, 0, 0, 0.07]
plt.figure(figsize= (9,6))
plt.pie(sizes, labels= labels,autopct='%1.0f%%',startangle=90,explode= explode,colors= youtube_color_donutchart,pctdistance=0.86)

plt.legend(title = 'Category',bbox_to_anchor=(1.1, 1), labels = labels)
plt.axis('equal')
plt.title('Percent Uploads by Category', fontweight = 'heavy', fontsize = 16)
plt.tight_layout()

circle = plt.Circle(xy= (0,0), radius= .70, facecolor = 'white')
plt.gca().add_artist(circle)
plt.show()

"""**5. What is the distribution of YouTube channels in each category?**"""

#Select features
count_category = statis_category[['Category', 'Count of Category']].sort_values(by = 'Count of Category', ascending= False).reset_index(drop = True)

# Group features with counts under 300 into the general category other
count_category.loc[count_category['Count of Category'] < 20, 'Category'] = 'Other'
count_category = count_category.groupby(['Category'])['Count of Category'].sum().reset_index().sort_values(by = 'Count of Category', ascending= False)


# total = sum(count_category['Count of Category'])
# count_category['Percent Category'] = [round((value / total) * 100,0) for value in count_category['Count of Category']]
count_category.reset_index(drop= True, inplace= True)

#Show statistics table
count_category

sb.set_style("whitegrid",{'axes.grid' : False})

plt.figure(figsize=(10,7))
# Select data for categoies and values feature
cnt_category = count_category['Count of Category'].to_list()

#Chart
plt.title('Number of Youtube Channels by each Category (2023)', fontsize = 16, fontweight = 'heavy')
sb.barplot(data= count_category, x = 'Category', y = 'Count of Category', palette= youtube_color_barchart_10)

#Add number for each columns
for i, value in enumerate(cnt_category):
    plt.text(i, value + 1, cnt_category[i],  ha = 'center', fontsize=10, fontweight = 'heavy')

sb.despine(left=True, bottom=True)
plt.grid(axis = 'y', linestyle ='--')
plt.xlabel('Category', fontsize = 13, fontweight = 'heavy')
plt.ylabel('Count of Category', fontweight = 'heavy', fontsize = 13)
plt.xticks(rotation = 65)
plt.yticks([]) #loại bỏ các tham số trên trục y
plt.show();

"""**6. User trends on YouTube based on subscribers and views in each category.¶**"""

sub_youtuber_cate = youtube[['Youtuber', 'Category', 'Subscribers']].sort_values(by = 'Subscribers', ascending= False).reset_index(drop = True).head(10)
sub_youtuber_cate

#Select feature for subscribers chart
subs_category = statis_category[['Category', 'Subscribers (million)']].sort_values(by= 'Subscribers (million)', ascending= False).reset_index(drop= True)
subs_category['Percent (%)'] = round((subs_category['Subscribers (million)'] / sum(subs_category['Subscribers (million)'])) *100,0)
subs_category

view_youtuber_cate = youtube[['Youtuber', 'Category', 'Video Views']].sort_values(by = 'Video Views', ascending= False).reset_index(drop = True).head(10)
view_youtuber_cate

#Select feature for views chart
views_category = statis_category[['Category', 'Video Views (billion)']].sort_values(by= 'Video Views (billion)', ascending= False).reset_index(drop= True)
views_category['Percent (%)'] = round((views_category['Video Views (billion)'] / sum(views_category['Video Views (billion)']))*100,0)
views_category

sb.set_style("whitegrid",{'axes.grid' : True})

fig, ax = plt.subplots(1, 2, figsize = (25,8))

#Subscribers chart
sb.barplot(data= subs_category, x= 'Category', y = 'Subscribers (million)', ax= ax[0], palette = youtube_color_barchart_freestyle1)
ax[0].set_title('Numbers of Subscribers by Channel Category ', fontweight = 'heavy', fontsize = 20)
ax[0].set_ylabel('Subscribers (million)', fontsize = 15, fontweight = 'heavy')
ax[0].set_xlabel('Category',  fontsize = 15, fontweight = 'heavy')
ax[0].grid(axis = 'y', linestyle ='--')
ax[0].spines['top'].set_visible(False)
ax[0].spines['right'].set_visible(False)
ax[0].spines['bottom'].set_visible(False)
ax[0].spines['left'].set_visible(False)
plt.sca(ax[0])
plt.xticks(rotation = 90)

#Views chart
sb.barplot(data= views_category, x= 'Category', y = 'Video Views (billion)', ax= ax[1], palette = youtube_color_barchart_freestyle1)
ax[1].set_title('Numbers of Views by Channel Category ', fontweight = 'heavy', fontsize = 20)
ax[1].set_ylabel('Views (billion)',  fontsize = 15, fontweight = 'heavy')
ax[1].set_xlabel('Category',  fontsize = 15, fontweight = 'heavy')
ax[1].grid(axis = 'y', linestyle ='--')
ax[1].spines['top'].set_visible(False)
ax[1].spines['right'].set_visible(False)
ax[1].spines['bottom'].set_visible(False)
ax[1].spines['left'].set_visible(False)
plt.sca(ax[1])
plt.xticks(rotation = 90)
plt.show()

"""**7. How do users interact in these categories (measured by views per subscriber)?**"""

#Group subscribers and video views by categories
subs_views_category = youtube.groupby('Category').agg({'Subscribers' : 'sum',
                                                      'Video Views' : 'sum'})

#Create View-to-Subscriber Ratio
subs_views_category['View-to-Subscriber Ratio'] = (subs_views_category['Video Views'] / subs_views_category['Subscribers']).astype('int')
subs_views_category.sort_values(by= 'View-to-Subscriber Ratio', ascending= False, inplace= True)
subs_views_category.reset_index( inplace= True)

#Show statistics table
subs_views_category

sb.set_style("whitegrid",{'axes.grid' : False})
plt.figure(figsize= (12,8))

#Convert variable to a list
labels = subs_views_category['View-to-Subscriber Ratio'].to_list()

#Chart
plt.title('Average View to Subscriber Ratio by Channel Category (2023)', fontweight = 'heavy', fontsize = 16)
sb.barplot(data= subs_views_category, x = 'Category', y = 'View-to-Subscriber Ratio', color = '#f00000') #palette= youtube_color_a
plt.xlabel('Channel Category', fontsize = 12, fontweight = 'heavy')
plt.ylabel('View to Subscriber Ratio', fontsize = 12, fontweight = 'heavy')

#Add label for each columns in chart
for i, value in enumerate(labels):
    plt.text(i, value + 6, labels[i],  ha = 'center', fontsize=10)

sb.despine(left=True, bottom=True)
plt.xticks(rotation = 90)
plt.yticks([])
plt.show()

print('Average views per subscriber for all categories:',round(subs_views_category['View-to-Subscriber Ratio'].mean(),0))

from wordcloud import WordCloud
#Get column names of the dataset
column_names=data.columns.tolist()
#Create a word cloud plot of the column names
wordcloud=WordCloud(background_color='white').generate(''.join(column_names))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis('off')
plt.show()

"""**In which year were the most successful YouTube channels established?**"""

cnt_created_year = youtube.groupby('Created Year').size().to_frame().reset_index().rename(columns= {0 : 'Count'})
cnt_created_year.sort_values(by = 'Count', ascending= False)

sb.set_style("whitegrid",{'axes.grid' : False})
plt.figure(figsize= (12,8))

plt.figure( figsize= (10,6))
plt.title('Youtube Channels by Created Year', fontweight = 'heavy', fontsize = 18)
sb.lineplot(data = cnt_created_year, y = 'Count', x = 'Created Year', color = 'red')

label_points = [(2014, 95), (2006, 89), (2011, 81)]
for point in label_points:
    plt.text(point[0], point[1], f'{point[1]}', ha='center', va='bottom')

for point in label_points:
    x, y = point
    plt.scatter(x, y, color='red', marker='o', s=20)

plt.xlabel('Created Year', fontweight = 'heavy', fontsize = 14)
plt.ylabel('Count', fontweight = 'heavy', fontsize = 14)
sb.despine(left=False, bottom=False)
# plt.grid(axis = 'x', linestyle ='-.')
plt.tight_layout()
plt.xticks(cnt_created_year['Created Year'])
plt.show()

"""**Content creation trends over time for these channels.**"""

top_cnt_channel_by_year = youtube.groupby(['Created Year', 'Category'])['Youtuber'].count().reset_index().sort_values(by='Youtuber', ascending= False).drop_duplicates(subset='Created Year').sort_values(by='Created Year')
top_cnt_channel_by_year.reset_index(drop= True, inplace=True)
top_cnt_channel_by_year

plt.figure(figsize= (12,6))
sb.barplot(data = top_cnt_channel_by_year, x = 'Created Year', y = 'Youtuber', hue = 'Category', dodge=False, palette= youtube_color_barchart_freestyle2)
plt.title('Top Cateogry Channel by Year', fontweight = 'heavy', fontsize = 18)
plt.xlabel('Created Year', fontweight = 'heavy', fontsize = 12)
plt.ylabel('Count', fontweight = 'heavy', fontsize = 12)
plt.xticks(rotation = 0, ha = 'center')
sb.despine(left=True, bottom=True)
plt.grid(axis = 'y', linestyle ='--')
plt.show()

"""**Average monthly profitability in each category.**"""

potentially_lucrative = youtube[['Category', 'Lowest Monthly Earnings', 'Highest Monthly Earnings']]
potentially_lucrative.sample(5)

potentially_lucrative['Average Monthly Earnings'] = (potentially_lucrative['Lowest Monthly Earnings'] + potentially_lucrative['Highest Monthly Earnings'])/2
potentially_lucrative.sample(5)

category_avg_earnings = potentially_lucrative.groupby('Category')['Average Monthly Earnings'].mean().reset_index()
category_avg_earnings['Average Monthly Earnings (1000$)'] = (category_avg_earnings['Average Monthly Earnings'] /1000).astype('int')
category_avg_earnings.sort_values(by= 'Average Monthly Earnings (1000$)', ascending= False, inplace= True)
category_avg_earnings.reset_index(drop = True, inplace= True)
category_avg_earnings

plt.figure(figsize=(12,8))
sb.barplot(data= category_avg_earnings, x = 'Category', y = 'Average Monthly Earnings (1000$)', palette= youtube_color_barchart_freestyle3)
plt.title('Average Monthly Earnings by Channel Category', fontweight = 'heavy', fontsize = 16)
sb.despine(left=True, bottom=True)
plt.grid(axis = 'y', linestyle ='--')
plt.xlabel('Channel Category', fontweight = 'heavy', fontsize = 12)
plt.ylabel('Average Monthly Earnings (1000$)', fontweight = 'heavy', fontsize = 12)
plt.xticks(rotation = 75)
plt.show()